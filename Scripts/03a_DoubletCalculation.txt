%matplotlib inline
import scrublet as scr
import scipy.io
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = 'Arial'
plt.rc('font', size=14)
plt.rcParams['pdf.fonttype'] = 42

### DUOD2 ###
input_dir = '/lustre/project/fsepru/PIGscRNAseq2/QC/DUOD2onlyFilteredQC/'
DUOD2_counts_matrix = scipy.io.mmread(input_dir + 'matrix.mtx').T.tocsc()
DUOD2_genes = np.array(scr.load_genes(input_dir + 'features.tsv', delimiter='\t', column=1))
print('Counts matrix shape: {} rows, {} columns'.format(DUOD2_counts_matrix.shape[0], DUOD2_counts_matrix.shape[1]))
print('Number of genes in gene list: {}'.format(len(DUOD2_genes)))

DUOD2_scrub = scr.Scrublet(DUOD2_counts_matrix, expected_doublet_rate=0.07)
DUOD2_doublet_scores, DUOD2_predicted_doublets = DUOD2_scrub.scrub_doublets(min_counts=2, min_cells=3, min_gene_variability_pctl=85, n_prin_comps=30)
DUOD2_scrub.call_doublets(threshold=0.25)
DUOD2_scrub.plot_histogram();

DUOD2_scrub.set_embedding('UMAP', scr.get_umap(DUOD2_scrub.manifold_obs_, 10, min_dist=0.3))
DUOD2_scrub.plot_embedding('UMAP', order_points=True);

pdDUOD2 = pd.DataFrame(DUOD2_scrub.doublet_scores_obs_)
pd.DataFrame.to_csv(pdDUOD2, "DUOD2_ScrubScore.csv")
### END ###

### IPP2 ###
input_dir = '/lustre/project/fsepru/PIGscRNAseq2/QC/IPP2onlyFilteredQC/'
IPP2_counts_matrix = scipy.io.mmread(input_dir + 'matrix.mtx').T.tocsc()
IPP2_genes = np.array(scr.load_genes(input_dir + 'features.tsv', delimiter='\t', column=1))
print('Counts matrix shape: {} rows, {} columns'.format(IPP2_counts_matrix.shape[0], IPP2_counts_matrix.shape[1]))
print('Number of genes in gene list: {}'.format(len(IPP2_genes)))

IPP2_scrub = scr.Scrublet(IPP2_counts_matrix, expected_doublet_rate=0.07)
IPP2_doublet_scores, IPP2_predicted_doublets = IPP2_scrub.scrub_doublets(min_counts=2, min_cells=3, min_gene_variability_pctl=85, n_prin_comps=30)
IPP2_scrub.call_doublets(threshold=0.25)
IPP2_scrub.plot_histogram();

IPP2_scrub.set_embedding('UMAP', scr.get_umap(IPP2_scrub.manifold_obs_, 10, min_dist=0.3))
IPP2_scrub.plot_embedding('UMAP', order_points=True);

pdIPP2 = pd.DataFrame(IPP2_scrub.doublet_scores_obs_)
pd.DataFrame.to_csv(pdIPP2, "IPP2_ScrubScore.csv")
### END ###

### JEJ2 ###
input_dir = '/lustre/project/fsepru/PIGscRNAseq2/QC/JEJ2onlyFilteredQC/'
JEJ2_counts_matrix = scipy.io.mmread(input_dir + 'matrix.mtx').T.tocsc()
JEJ2_genes = np.array(scr.load_genes(input_dir + 'features.tsv', delimiter='\t', column=1))
print('Counts matrix shape: {} rows, {} columns'.format(JEJ2_counts_matrix.shape[0], JEJ2_counts_matrix.shape[1]))
print('Number of genes in gene list: {}'.format(len(JEJ2_genes)))

JEJ2_scrub = scr.Scrublet(JEJ2_counts_matrix, expected_doublet_rate=0.07)
JEJ2_doublet_scores, JEJ2_predicted_doublets = JEJ2_scrub.scrub_doublets(min_counts=2, min_cells=3, min_gene_variability_pctl=85, n_prin_comps=30)
JEJ2_scrub.call_doublets(threshold=0.25)
JEJ2_scrub.plot_histogram();

JEJ2_scrub.set_embedding('UMAP', scr.get_umap(JEJ2_scrub.manifold_obs_, 10, min_dist=0.3))
JEJ2_scrub.plot_embedding('UMAP', order_points=True);

pdJEJ2 = pd.DataFrame(JEJ2_scrub.doublet_scores_obs_)
pd.DataFrame.to_csv(pdJEJ2, "JEJ2_ScrubScore.csv")
### END ###

### NoPP2 ###
input_dir = '/lustre/project/fsepru/PIGscRNAseq2/QC/NoPP2onlyFilteredQC/'
NoPP2_counts_matrix = scipy.io.mmread(input_dir + 'matrix.mtx').T.tocsc()
NoPP2_genes = np.array(scr.load_genes(input_dir + 'features.tsv', delimiter='\t', column=1))
print('Counts matrix shape: {} rows, {} columns'.format(NoPP2_counts_matrix.shape[0], NoPP2_counts_matrix.shape[1]))
print('Number of genes in gene list: {}'.format(len(NoPP2_genes)))

NoPP2_scrub = scr.Scrublet(NoPP2_counts_matrix, expected_doublet_rate=0.07)
NoPP2_doublet_scores, NoPP2_predicted_doublets = NoPP2_scrub.scrub_doublets(min_counts=2, min_cells=3, min_gene_variability_pctl=85, n_prin_comps=30)
NoPP2_scrub.call_doublets(threshold=0.25)
NoPP2_scrub.plot_histogram();

NoPP2_scrub.set_embedding('UMAP', scr.get_umap(NoPP2_scrub.manifold_obs_, 10, min_dist=0.3))
NoPP2_scrub.plot_embedding('UMAP', order_points=True);

pdNoPP2 = pd.DataFrame(NoPP2_scrub.doublet_scores_obs_)
pd.DataFrame.to_csv(pdNoPP2, "NoPP2_ScrubScore.csv")
### END ###

### GUT Dataset2 END ###

